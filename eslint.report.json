[{"filePath":"/Users/odin.rochmann/dev/fusion/fusion-web/packages/theme/src/index.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/odin.rochmann/dev/fusion/fusion-web/packages/theme/src/style-property.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[519,522],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[519,522],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Properties } from 'csstype';\n\nexport interface CSSProperties extends Properties {\n  [k: string]: unknown | CSSProperties | StyleProperty;\n}\n\nconst camel2kebab = (x: string) => x.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();\n\nexport type StyleAttribute = { attribute: string; value?: string | number; base?: boolean };\n\n// Type of style(). Previous type caused an error in dependant apps.\n// type CSSProperties = Omit<StandardProperties, 'fontSizeAdjust'>;\n\nexport abstract class StyleProperty<T = any, A extends string = string> {\n  static makeCssVar(element: string, module: string): string {\n    return `--fusion-${element}__${module}`;\n  }\n\n  static makeCss(obj: CSSProperties): string {\n    return Object.keys(obj)\n      .map((x) => `${camel2kebab(x)}: ${obj[x as keyof CSSProperties]}`)\n      .join(';');\n  }\n\n  static makeVariable({ attribute, value }: StyleAttribute): string {\n    return `var(${[attribute, value].filter((x) => !!x).join(',')})`;\n  }\n\n  static extractVariables<T extends StyleProperty>(styles: Record<string, T>): string[] {\n    return Object.values(styles).reduce((cur, value) => cur.concat(value.variables), [] as string[]);\n  }\n\n  constructor(public readonly name: string, public readonly value: T) {}\n\n  abstract get attributes(): Record<A, StyleAttribute>;\n\n  get style(): CSSProperties {\n    const { value, attributes } = this;\n    return {\n      ...value,\n      ...(Object.keys(attributes) as A[]).reduce(\n        (cur, key) => Object.assign(cur, { [key]: StyleProperty.makeVariable(attributes[key]) }),\n        {}\n      ),\n    };\n  }\n\n  get css(): string {\n    const { attributes, style } = this;\n    return StyleProperty.makeCss({\n      ...style,\n      ...(Object.keys(attributes) as A[]).reduce(\n        (cur, key) => Object.assign(cur, { [key]: StyleProperty.makeVariable(attributes[key]) }),\n        {}\n      ),\n    });\n  }\n\n  get variables(): string[] {\n    return this.getVariables();\n  }\n\n  public getAttributes(include_base?: boolean): StyleAttribute[] {\n    return (Object.values(this.attributes) as StyleAttribute[]).filter((x) => include_base || !x.base);\n  }\n\n  /**\n   * get a attribute as a css variable\n   *\n   * @example\n   * `my-class {\n   *    background: ${styles.colors.green.getVariable('color')}\n   * }`\n   */\n  public getVariable(name: A): string {\n    return StyleProperty.makeVariable(this.attributes[name]);\n  }\n\n  /**\n   * return all configured css varibles;\n   *\n   * @example\n   * `:root { ${styles.colors.green.getVariables().join(';')} }`\n   */\n  public getVariables(include_base?: boolean): string[] {\n    return this.getAttributes(include_base).map(({ attribute, value }) => [attribute, value].join(':'));\n  }\n\n  public toString(): string {\n    return this.css;\n  }\n}\n\nexport default StyleProperty;\n","usedDeprecatedRules":[]},{"filePath":"/Users/odin.rochmann/dev/fusion/fusion-web/packages/theme/src/styles/colors.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/odin.rochmann/dev/fusion/fusion-web/packages/theme/src/styles/elevation.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/odin.rochmann/dev/fusion/fusion-web/packages/theme/src/styles/index.ts","messages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/odin.rochmann/dev/fusion/fusion-web/packages/theme/src/styles/spacing.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":7,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":7,"endColumn":19}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { tokens } from '@equinor/eds-tokens';\nimport { StyleProperty, CSSProperties } from '../style-property';\n\nexport type SpacingStyleAttribute = 'padding';\n\nexport class SpacingStyleProperty extends StyleProperty<string, SpacingStyleAttribute> {\n  get attributes() {\n    const { name, value } = this;\n    const attribute = StyleProperty.makeCssVar('spacing', name);\n    return {\n      padding: { attribute, value },\n    };\n  }\n\n  get style(): CSSProperties {\n    return {\n      padding: this.value,\n    };\n  }\n}\n\nconst createStyleProperty = <T extends Record<string, string>, Tkey extends keyof T>(\n  obj: T,\n  name: string\n): Record<Tkey, SpacingStyleProperty> =>\n  Object.keys(obj).reduce(\n    (cur, key) => Object.assign(cur, { [key]: new SpacingStyleProperty(`${name}-${key}`, obj[key]) }),\n    {} as Record<Tkey, SpacingStyleProperty>\n  );\n\nexport const spacing = {\n  comfortable: createStyleProperty(tokens.spacings.comfortable, 'comfortable'),\n};\n\nexport const spacingVariables = Object.values(spacing).reduce(\n  (cur, value) => cur.concat(SpacingStyleProperty.extractVariables(value)),\n  [] as string[]\n);\n\nexport default spacing;\n","usedDeprecatedRules":[]},{"filePath":"/Users/odin.rochmann/dev/fusion/fusion-web/packages/theme/src/styles/typography.ts","messages":[{"ruleId":"@typescript-eslint/explicit-module-boundary-types","severity":1,"message":"Missing return type on function.","line":6,"column":3,"nodeType":"FunctionExpression","messageId":"missingReturnType","endLine":6,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2156,2159],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2156,2159],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { tokens, Typography } from '@equinor/eds-tokens';\nimport { StyleProperty, StyleAttribute } from '../style-property';\n\ntype TypographyAttribute = keyof Typography;\nexport class TypographyStyleProperty extends StyleProperty<Typography, TypographyAttribute> {\n  get attributes() {\n    const { name, value } = this;\n    return {\n      color: {\n        attribute: StyleProperty.makeCssVar('typography', `${name}__color`),\n        value: StyleProperty.makeVariable({\n          attribute: StyleProperty.makeCssVar('typography', `base-color`),\n          value: value.color,\n        }),\n        base: true,\n      },\n      fontFamily: {\n        attribute: StyleProperty.makeCssVar('typography', `${name}-fontFamily`),\n        value: value.fontFamily,\n      },\n      fontSize: {\n        attribute: StyleProperty.makeCssVar('typography', `${name}-fontSize`),\n        value: value.fontSize,\n      },\n      fontWeight: {\n        attribute: StyleProperty.makeCssVar('typography', `${name}-fontWeight`),\n        value: value.fontWeight,\n      },\n      lineHeight: {\n        attribute: StyleProperty.makeCssVar('typography', `${name}-lineHeight`),\n        value: value.lineHeight,\n      },\n      textAlign: {\n        attribute: StyleProperty.makeCssVar('typography', `${name}-textAlign`),\n        value: value.textAlign,\n      },\n      letterSpacing: {\n        attribute: StyleProperty.makeCssVar('typography', `${name}-letterSpacing`),\n        value: value.letterSpacing,\n      },\n      fontStyle: {\n        attribute: StyleProperty.makeCssVar('typography', `${name}-fontStyle`),\n        value: value.fontStyle,\n      },\n      textTransform: {\n        attribute: StyleProperty.makeCssVar('typography', `${name}-textTransform`),\n        value: value.textTransform,\n      },\n      textDecoration: {\n        attribute: StyleProperty.makeCssVar('typography', `${name}-textDecoration`),\n        value: value.textDecoration,\n      },\n      fontFeature: {\n        attribute: StyleProperty.makeCssVar('typography', `${name}-fontFeature`),\n        value: value.fontFeature,\n      },\n    };\n  }\n}\n\nconst createStyleProperty = <T extends Record<string, TypographyAttribute | any>, Tkey extends keyof T>(\n  obj: T,\n  name: string\n): Record<Tkey, TypographyStyleProperty> =>\n  Object.keys(obj).reduce(\n    (cur, key) => Object.assign(cur, { [key]: new TypographyStyleProperty(`${name}-${key}`, obj[key]) }),\n    {} as Record<Tkey, TypographyStyleProperty>\n  );\n\nexport const typography = {\n  heading: createStyleProperty(tokens.typography.heading, 'heading'),\n  input: createStyleProperty(tokens.typography.input, 'input'),\n  navigation: createStyleProperty(tokens.typography.navigation, 'navigation'),\n  paragraph: createStyleProperty(tokens.typography.paragraph, 'paragraph'),\n  table: createStyleProperty(tokens.typography.table, 'table'),\n  ui: createStyleProperty(tokens.typography.ui, 'ui'),\n};\n\nexport const baseTypographyColor: StyleAttribute = {\n  attribute: StyleProperty.makeCssVar('typography', `base-color`),\n  value: tokens.colors.text.static_icons__default.rgba,\n};\n\nexport const typographyVariables = [\n  ...Object.values(typography).reduce(\n    (cur, value) => cur.concat(StyleProperty.extractVariables(value)),\n    [] as string[]\n  ),\n  [baseTypographyColor.attribute, baseTypographyColor.value].join(':'),\n];\n\nexport default typography;\n","usedDeprecatedRules":[]}]